#include "DataHubs.h"
#include <iostream>
#include <thread>
#include <unistd.h>
#include <algorithm>
#include <vector>

namespace uBEE
{

DataHubs::DataHubs(int num)       // constructor  new thread fot getting data APIs.
{
  if(num < 1) {
    std::cout << "vH number should be more than 1!\n";
    exit(-1);
  }
  DataHubs::Vhnum = num;
  for(int i = 0; i< DataHubs::Vhnum; i++) {
    uWS::Hub h;
    DataHubs::Vh.push_back(h);
  }
  DataHubs::Nsgroup = &DataHubs::Nh.getDefaultGroup<uWS::SERVER>();
  DataHubs::Csgroup = &DataHubs::Ch.getDefaultGroup<uWS::SERVER>();
  DataHubs::Ssgroup = &DataHubs::Sh.getDefaultGroup<uWS::SERVER>();
  DataHubs::Nsgroup = &DataHubs::Nh.getDefaultGroup<uWS::SERVER>();

}

void DataHubs::VhInit()
{
  for(int i = 0; i< DataHubs::Vhnum; i++) {
    std::mutex m;
   
    std::thread t([this,&i] {
      this->Vh[i].onTransfer([](uWS::WebSocket<uWS::SERVER> *ws)
      {
        /*
        if(ws->getUserData() != (void *) 12345) {
          std::cout << "onTransfer called with websocket with invalid user data set!" << std::endl;
          exit(-1);
        }
        */
      });

      this->Vh[i].onMessage([](uWS::WebSocket<uWS::SERVER> *ws, char *message, size_t length, uWS::OpCode opCode)
      {
        // to do something 
        ws->send("----from transfer server ----");
      });

      this->Vh[i].getDefaultGroup<uWS::SERVER>().listen(uWS::TRANSFERS);
      std::cout<<"will running ----------------------------\n";
      this->Vh[i].run();
    });  /* thread t */

    std::cout << " in H HHH \n" ;
    t.detach();
  } // end for
}


void DataHubs::Init()
{

}

}
